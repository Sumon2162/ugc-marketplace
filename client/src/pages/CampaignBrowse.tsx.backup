import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { apiService } from '../config/api';

interface Campaign {
  _id: string;
  title: string;
  description: string;
  budget: number;
  category: string;
  timeline: string;
  contentTypes: string[];
  platforms: string[];
  brand: {
    firstName: string;
    lastName: string;
    companyName?: string;
  };
  createdAt: string;
  status: string;
}

const CampaignBrowse: React.FC = () => {
  alert("ðŸš€ CampaignBrowse component loaded!");
  const { user } = useAuth();
  const [campaigns, setCampaigns] = useState<Campaign[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedCategory, setSelectedCategory] = useState('all');

  useEffect(() => {
    console.log("ðŸ”¥ useEffect is running!");
    alert("useEffect started!");
    fetchCampaigns();
  }, []);

  const fetchCampaigns = async () => {
    console.log("ðŸ“ž fetchCampaigns called!");
    alert("About to fetch campaigns!");
    try {
      const response = await apiService.getAllCampaigns();
      setCampaigns(response.campaigns || []);
    } catch (error) {
      console.error('Error fetching campaigns:', error);
    } finally {
      setLoading(false);
    }
  };

  const applyToCampaign = async (campaignId: string) => {
    try {
      const proposal = prompt("Please enter your proposal for this campaign:");
      if (!proposal) return;

      await apiService.post(`/campaigns/${campaignId}/apply`, {
        proposal
      });
      
      alert('ï¿½ï¿½ Application submitted successfully!');
    } catch (error) {
      console.error('Error applying to campaign:', error);
      alert('Error submitting application. Please try again.');
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-violet-900 flex items-center justify-center">
        <div className="text-white text-xl">Loading campaigns...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-violet-900">
      <div className="container mx-auto px-6 py-8">
        {/* Header */}
        <div className="text-center mb-8">
<h1 className="text-4xl md:text-5xl font-bold text-white mb-4">
            Browse Campaigns
          </h1>
          <p className="text-xl text-gray-300 max-w-2xl mx-auto">
            Discover exciting brand partnerships and grow your creator business
          </p>
        </div>

        {/* Campaigns Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {campaigns.map((campaign) => (
            <div
              key={campaign._id}
              className="bg-gray-800/50 backdrop-blur-sm rounded-2xl p-6 border border-gray-700/50"
            >
              <h3 className="text-xl font-bold text-white mb-2">{campaign.title}</h3>
              <p className="text-gray-400 text-sm mb-4">{campaign.description}</p>
              
              <div className="mb-4">
                <span className="text-green-400 font-bold">${campaign.budget}</span>
                <span className="text-gray-400 mx-2">â€¢</span>
                <span className="text-purple-400">{campaign.category}</span>
              </div>

              <button
                onClick={() => applyToCampaign(campaign._id)}
                className="w-full bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-lg"
              >
                Apply Now
              </button>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default CampaignBrowse;
