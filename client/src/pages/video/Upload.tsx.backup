import React, { useState } from 'react';
import { useAuth } from '../../contexts/AuthContext';

const Upload: React.FC = () => {
  const { user } = useAuth();
  const [file, setFile] = useState<File | null>(null);
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [category, setCategory] = useState('lifestyle');
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [dragActive, setDragActive] = useState(false);

  const categories = [
    { value: 'lifestyle', label: '‚ú® Lifestyle', icon: 'üåü' },
    { value: 'beauty', label: 'üíÑ Beauty', icon: 'üíã' },
    { value: 'fashion', label: 'üëó Fashion', icon: 'üë†' },
    { value: 'fitness', label: 'üí™ Fitness', icon: 'üèÉ‚Äç‚ôÄÔ∏è' },
    { value: 'food', label: 'üçï Food', icon: 'üçΩÔ∏è' },
    { value: 'travel', label: '‚úàÔ∏è Travel', icon: 'üåç' },
    { value: 'tech', label: 'üì± Tech', icon: 'üíª' },
    { value: 'gaming', label: 'üéÆ Gaming', icon: 'üïπÔ∏è' }
  ];

  const handleDrag = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      const droppedFile = e.dataTransfer.files[0];
      if (droppedFile.type.startsWith('video/')) {
        setFile(droppedFile);
      } else {
        alert('Please upload a video file');
      }
    }
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const selectedFile = e.target.files[0];
      if (selectedFile.type.startsWith('video/')) {
        setFile(selectedFile);
      } else {
        alert('Please upload a video file');
      }
    }
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!file || !title.trim() || !description.trim()) {
      alert('Please fill in all required fields and select a video file');
      return;
    }

    setIsUploading(true);
    setUploadProgress(0);

    try {
      const formData = new FormData();
      formData.append('video', file);
      formData.append('title', title.trim());
      formData.append('description', description.trim());
      formData.append('category', category);

      // Simulate upload progress
      const progressInterval = setInterval(() => {
        setUploadProgress(prev => {
          if (prev >= 90) {
            clearInterval(progressInterval);
            return prev;
          }
          return prev + Math.random() * 15;
        });
      }, 500);

      const token = localStorage.getItem('token');
      const response = await fetch('http://localhost:5001/api/videos/upload', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
        },
        body: formData,
      });

      clearInterval(progressInterval);
      setUploadProgress(100);

      if (response.ok) {
        const result = await response.json();
        console.log('Upload successful:', result);
        
        setTimeout(() => {
          alert('üéâ Video uploaded successfully!');
          // Reset form
          setFile(null);
          setTitle('');
          setDescription('');
          setCategory('lifestyle');
          setUploadProgress(0);
        }, 500);
      } else {
        const error = await response.text();
        console.error('Upload failed:', error);
        alert('Upload failed. Please try again.');
      }
    } catch (error) {
      console.error('Upload error:', error);
      alert('Upload failed. Please check your connection and try again.');
    } finally {
      setIsUploading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 pt-20">
      {/* Floating Background Elements */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none">
        <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-purple-500/10 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-blue-500/10 rounded-full blur-3xl animate-pulse delay-1000"></div>
        <div className="absolute top-3/4 left-3/4 w-64 h-64 bg-pink-500/10 rounded-full blur-3xl animate-pulse delay-2000"></div>
      </div>

      <div className="relative z-10 max-w-4xl mx-auto px-6 py-8">
        {/* Header */}
        <div className="text-center mb-12">
          <div className="inline-flex items-center space-x-3 mb-4">
            <div className="w-12 h-12 bg-gradient-to-r from-purple-600 to-blue-600 rounded-xl flex items-center justify-center text-2xl">
              üìπ
            </div>
            <h1 className="text-5xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
              Upload Content
            </h1>
          </div>
          <p className="text-xl text-gray-300 max-w-2xl mx-auto">
            Share your creativity with the world. Upload high-quality videos and reach your audience.
          </p>
        </div>

        {/* Upload Form */}
        <div className="bg-black/20 backdrop-blur-xl rounded-3xl border border-white/10 p-8 shadow-2xl">
          <form onSubmit={handleSubmit} className="space-y-8">
            {/* File Upload Area */}
            <div className="space-y-4">
              <label className="block text-lg font-semibold text-white mb-4">
                üìé Video File *
              </label>
              
              <div
                className={`relative border-2 border-dashed rounded-2xl p-8 text-center transition-all duration-300 ${
                  dragActive
                    ? 'border-purple-500 bg-purple-500/10'
                    : file
                    ? 'border-green-500 bg-green-500/10'
                    : 'border-gray-600 bg-gray-800/30 hover:border-purple-400 hover:bg-purple-400/5'
                }`}
                onDragEnter={handleDrag}
                onDragLeave={handleDrag}
                onDragOver={handleDrag}
                onDrop={handleDrop}
              >
                <input
                  type="file"
                  accept="video/*"
                  onChange={handleFileChange}
                  className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                  disabled={isUploading}
                />
                
                {file ? (
                  <div className="space-y-4">
                    <div className="text-6xl">‚úÖ</div>
                    <div>
                      <p className="text-xl font-semibold text-green-400">{file.name}</p>
                      <p className="text-gray-400">{formatFileSize(file.size)}</p>
                      <p className="text-sm text-gray-500 mt-2">Click to change file</p>
                    </div>
                  </div>
                ) : (
                  <div className="space-y-4">
                    <div className="text-6xl">üé¨</div>
                    <div>
                      <p className="text-xl font-semibold text-white">Drop your video here</p>
                      <p className="text-gray-400">or click to browse files</p>
                      <p className="text-sm text-gray-500 mt-2">Supports MP4, MOV, AVI (Max 100MB)</p>
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Title Input */}
            <div className="space-y-4">
              <label className="block text-lg font-semibold text-white">
                üìù Video Title *
              </label>
              <input
                type="text"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                placeholder="Enter an engaging title for your video"
                className="w-full px-6 py-4 bg-gray-800/50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200"
                disabled={isUploading}
                maxLength={100}
              />
              <p className="text-sm text-gray-500">{title.length}/100 characters</p>
            </div>

            {/* Description Input */}
            <div className="space-y-4">
              <label className="block text-lg font-semibold text-white">
                üìÑ Description *
              </label>
              <textarea
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                placeholder="Describe your video content, target audience, and key message"
                rows={4}
                className="w-full px-6 py-4 bg-gray-800/50 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 resize-none"
                disabled={isUploading}
                maxLength={500}
              />
              <p className="text-sm text-gray-500">{description.length}/500 characters</p>
            </div>

            {/* Category Selection */}
            <div className="space-y-4">
              <label className="block text-lg font-semibold text-white">
                üè∑Ô∏è Category
              </label>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                {categories.map((cat) => (
                  <button
                    key={cat.value}
                    type="button"
                    onClick={() => setCategory(cat.value)}
                    className={`p-4 rounded-xl border transition-all duration-200 text-left ${
                      category === cat.value
                        ? 'bg-gradient-to-r from-purple-600 to-blue-600 border-purple-500 text-white'
                        : 'bg-gray-800/50 border-gray-600 text-gray-300 hover:border-purple-400 hover:bg-purple-400/10'
                    }`}
                    disabled={isUploading}
                  >
                    <div className="text-2xl mb-1">{cat.icon}</div>
                    <div className="text-sm font-medium">{cat.label}</div>
                  </button>
                ))}
              </div>
            </div>

            {/* Upload Progress */}
            {isUploading && (
              <div className="space-y-4">
                <div className="flex items-center justify-between text-sm">
                  <span className="text-gray-300">Uploading...</span>
                  <span className="text-purple-400">{Math.round(uploadProgress)}%</span>
                </div>
                <div className="w-full bg-gray-700 rounded-full h-3">
                  <div
                    className="bg-gradient-to-r from-purple-600 to-blue-600 h-3 rounded-full transition-all duration-300 ease-out"
                    style={{ width: `${uploadProgress}%` }}
                  ></div>
                </div>
              </div>
            )}

            {/* Submit Button */}
            <div className="flex justify-center pt-6">
              <button
                type="submit"
                disabled={isUploading || !file || !title.trim() || !description.trim()}
                className={`px-12 py-4 rounded-xl font-semibold text-lg transition-all duration-300 ${
                  isUploading || !file || !title.trim() || !description.trim()
                    ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
                    : 'bg-gradient-to-r from-purple-600 to-blue-600 text-white hover:shadow-2xl hover:shadow-purple-500/25 transform hover:scale-105'
                }`}
              >
                {isUploading ? (
                  <div className="flex items-center space-x-3">
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                    <span>Uploading...</span>
                  </div>
                ) : (
                  <div className="flex items-center space-x-3">
                    <span>üöÄ</span>
                    <span>Publish Video</span>
                  </div>
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default Upload;